---
title: "チュートリアル: オーサリング"
code-copy: hover
editor_options:
  markdown:
    wrap: sentence
    canonical: true
---

``` include
../_tool-chooser.md
```

## 概要

このチュートリアルでは、Jupyter LabでQuartoドキュメントをオーサリングする方法を紹介します。
特に、作成可能な様々なドキュメント形式について説明し、目次、数式、引用、相互参照などのコンポーネントを追加する方法を紹介します。

## 出力フォーマット

Quarto はノートブックを何十種類もの[出力フォーマット](/docs/output-formats/all-formats.qmd)にレンダリングすることをサポートしています。
デフォルトでは `html` フォーマットが使用されますが、ドキュメントオプションで別のフォーマット(または複数のフォーマット)を指定することができます。

### フォーマットオプション

ノートブックを作成し、それをレンダリングするためのさまざまなフォーマットを定義し、それぞれのフォーマットにいくつかのオプションを追加してみましょう。
注意点として、ドキュメントのオプションはノートブックの最初にある「Raw」セル内でYAMLで指定します。
Rawセルを作成するには、ノートブックの先頭にセルを追加し、ノートブックツールバーを使用してその種類をRawに設定します。

![](images/jupyter-raw-cell.png){.border fig-alt="Notebook formats.ipynb with a dropdown shown for a cell with three options: Code, Markdown, and Raw. Raw is highlighted."}

では、基本的なドキュメントのメタデータと、デフォルトの出力形式を追加してみましょう。

``` {.yaml .visually-hidden}
---
title: "Quarto Document"
author: "Norah Jones"
format: pdf
jupyter: python3
---
```

![](images/jupyter-format.png){.border fig-alt=""}

デフォルトの出力形式として `pdf` を指定しました（`format` オプションを除外すると、デフォルトは `html` になります）。

PDF出力を制御するためのオプションを追加してみましょう。

``` {.yaml .visually-hidden}
---
title: "Quarto Document"
author: "Norah Jones"
format: 
  pdf: 
    toc: true
    number-sections: true
jupyter: python3
---
```

![](images/jupyter-format-options.png){.boder fig-alt=""}

### 複数のフォーマット

作成するドキュメントの中には、単一の出力形式しか持たないものもありますが、多くの場合、複数の形式をサポートすることが望ましいと思われます。
ここでは、 `html` と `docx` フォーマットをドキュメントに追加してみましょう。

``` {.yaml .visually-hidden}
---
title: "Quarto Document"
author: "Norah Jones"
toc: true
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-fold: true
    html-math-method: katex
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
  docx: default
jupyter: python3
---
```

![](images/jupyter-formats.png){.border fig-alt=""}

盛りだくさんの内容ですね。
少し分解してみましょう。
最初の2行は、出力形式とは全く関係のない一般的なドキュメントのメタデータです。

``` yaml
title: "Quarto Document"
author: "Norah Jones"
```

次の3行は、*すべてのフォーマット*に適用される文書フォーマットオプションです。
そのため、これらはルートレベルで指定されます。

``` yaml
toc: true
number-sections: true
highlight-style: pygments
```

次に、`format` オプションです。ここでは、フォーマット固有のオプションを指定します。

``` yaml
format:
  html: 
    code-fold: true
    html-math-method: katex
  pdf:
    geometry: 
      - top=30mm
      - left=30mm
  docx: default
```

`html` と `pdf` のフォーマットには、それぞれ1つまたは2つのオプションがあります。
例えば、HTMLの出力では、コードを表示するか隠すか (`code-fold: true`) をユーザーがコントロールできるようにし、数式テキストには `katex` を使用するようにします。
PDFでは、いくつかの余白を定義します。
`docx` フォーマットは少し変わっていて、 `docx: default` を指定しています。
これは、そのフォーマットのデフォルトのオプションをすべて使用することを意味します。

## レンダリング

ドキュメントオプションで指定されたフォーマットは、デフォルトでレンダリングされるものを定義します。
もし、上であげたすべてのオプションを使って、以下のようにノートブックをレンダリングするとしたら。

``` {.bash filename="Terminal"}
quarto render notebook.ipynb
```

すると、以下のようなファイルが作成されます。

-   `notebook.html`
-   `notebook.pdf`
-   `notebook.docx`

また、`--to`オプションで1つ以上の形式を選択することができます。

``` {.bash filename="Terminal"}
quarto render notebook.ipynb --to docx
quarto render notebook.ipynb --to docx,pdf
```

ターゲットファイル（この場合は `notebook.ipynb` ）は常にコマンドラインの一番最初の引数でなければならないことに注意してください。

必要であれば、ドキュメントオプションで指定されていないフォーマットもレンダリングすることができます。

``` {.bash filename="Terminal"}
quarto render notebook.ipynb --to odt
```

ドキュメントオプションに `odt` フォーマットが含まれていないため、このフォーマットに対するデフォルトのオプションが使用されます。

::: {.callout-note appearance="simple"}
Quartoは`.ipynb`をレンダリングするとき、デフォルトではノートブック内のセルを実行しないことに注意してください（ノートブックの編集中にすでに実行したと仮定されます）。
もし、セルを実行したい場合は、`--execute`フラグをレンダリングに渡すことができます。

``` {.bash filename="Terminal"}
quarto render notebook.ipynb --execute
```
:::

##  セクション

目次やセクション番号をつけることで、読者がドキュメントを読み進めやすくすることができます。
これを行うには、 `toc` や `number-sections` オプションをドキュメントオプションに追加します。
これらのオプションはすべてのフォーマットで共有されているため、通常はルートレベルで指定されることに注意してください。

``` {.yaml .visually-hidden}
---
title: Quarto Basics
author: Norah Jones
date: 'May 22, 2021'
toc: true
number-sections: true
jupyter: python3
---

## Colors

- Red
- Green 
- Blue

## Shapes

- Square
- Circle
- Triangle

## Textures

- Smooth
- Bumpy
- Fuzzy
```

![](images/jupyter-sections.png){.border fig-alt=""}

Here's what this document looks like when rendered to HTML.

![](images/sections-render.png){.border fig-alt="Document with title Quarto Basics, author, and date. Table of contents is on the left-hand side with numbered items for each of the three sections: 1. Colors, 2. Shapes, 3. Textures. Each section is shown in the document with the list contents from the source ipynb."}

There are lots of options available for controlling how the table of contents and section numbering behave.
See the output format documentation (e.g. [HTML](/docs/output-formats/html-basics.qmd), [PDF](/docs/output-formats/pdf-basics.qmd), [MS Word](/docs/output-formats/ms-word.qmd)) for additional details.

## Equations

You can add LaTeX equations to markdown cells within Jupyter Lab.

``` {.markdown .visually-hidden}
Einstein's theory of special relatively that expresses the equivalence of mass and energy:

$E = mc^{2}$
```

$E = mc^{2}$

![](/docs/get-started/authoring/images/jupyter-equation.png){.border fig-alt=""}

Equations are rendered when you run the cell.

![](/docs/get-started/authoring/images/jupyter-equation-render.png){.border fig-alt="Rendered notebook with LaTeX equation shown for E equals mc squared."}

Inline equations are delimited with `$…$`.
To create equations in a new line (display equation) use `$$…$$`.
See the documentation on [markdown equations](/docs/authoring/markdown-basics.html#equations) for additional details.

## Citations

To cite other works within a Quarto document.
First create a bibliography file in a supported format (BibTeX or CSL).
Then, link the bibliography to your document using the `bibliography` YAML metadata option.

Here's a notebook that includes a bibliography and single citation.
Note that markdown cells are un-executed so you can see all of the syntax.

```` {.markdown .visually-hidden}
---
title: Quarto Basics
format: html
bibliography: references.bib
jupyter: python3
---

## Overview

Knuth says always be literate [@knuth1984].

```{{python}}
1 + 1
```

## References
````

![](/docs/get-started/authoring/images/jupyter-citations.png){.border fig-alt=""}

Note that items within the bibliography are cited using the `@citeid` syntax.

``` markdown
 Knuth says always be literate [@knuth1984].
```

References will be included at the end of the document, so we include a `## References` heading at the bottom of the notebook.

Here is what this document looks like when rendered.

![](/docs/get-started/authoring/images/citations-render.png){.border width="600" fig-alt="Rendered notebook with references section at the bottom the content of which reads 'Knuth, Donald E. 1984. Literate Programming. The Computer Journal 27 (2): 97-111.'"}

\
The `@` citation syntax is very flexible and includes support for prefixes, suffixes, locators, and in-text citations.
See the documentation on [Citations and Footnotes](/docs/authoring/footnotes-and-citations.qmd) to learn more.

## Cross References

Cross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to figures, tables, equations, and sections.
Cross-reference-able entities generally require a label (unique identifier) and a caption.

The notebook below illustrates cross-referencing various types of entities.
Once again, the markdown cells are again un-executed so that the syntax is visible.

```` {.markdown .visually-hidden}
---
title: Quarto Crossrefs
format: html
jupyter: python3
---

## Overview

See @fig-simple in @sec-plot for a demonstration of a simple plot. 

See @eq-stddev to better understand standard deviation.

## Plot {#sec-plot}

```{{python}}
#| label: fig-simple
#| fig-cap: Simple Plot
import matplotlib.pyplot as plt
plt.plot([1,23,2,4])
plt.show()
```

## Equation {#sec-equation}

$$
s = \sqrt{\frac{1}{N-1} \sum_{i=1}^N (x_i - \overline{x})^2}
$$ {#eq-stddev}
````

$$
x + 1
$$

![](/docs/get-started/authoring/images/jupyter-crossref.png){.border fig-alt=""}

This example includes cross-referenced sections, figures, and equations.
The table below shows how we expressed each of these.

+----------+---------------+----------------------------------+
| Entity   | Reference     | Label / Caption                  |
+==========+===============+==================================+
| Section  | `@sec-plot`   | ID added to heading:             |
|          |               |                                  |
|          |               | ``` {.default code-copy="false"} |
|          |               | # Plot {#sec-plot}               |
|          |               | ```                              |
+----------+---------------+----------------------------------+
| Figure   | `@fig-simple` | YAML options in code cell:       |
|          |               |                                  |
|          |               | ``` {.default code-copy="false"} |
|          |               | #| label: fig-simple             |
|          |               | #| fig-cap: Simple Plot          |
|          |               | ```                              |
+----------+---------------+----------------------------------+
| Equation | `@eq-stddev`  | At end of display equation:      |
|          |               |                                  |
|          |               | ``` default                      |
|          |               | $$ {#eq-stddev}                  |
|          |               | ```                              |
+----------+---------------+----------------------------------+

: {tbl-colwidths=\[20,30,50\]}

And finally, here is what this notebook looks like when rendered.

![](/docs/get-started/authoring/images/crossref-render.png){.border width="600" fig-alt="Rendered page with linked cross references to figures and equations."}

See the article on [Cross References](/docs/authoring/cross-references.qmd) to learn more, including how to customize caption and reference text (e.g. use "Fig." rather than "Figure").

## Callouts

Callouts are an excellent way to draw extra attention to certain concepts, or to more clearly indicate that certain content is supplemental or applicable to only some scenarios.

Callouts are markdown divs that have special callout attributes.
Here's an example of creating a callout within a markdown cell.

``` {.markdown .visually-hidden}
::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::
```

![](/docs/get-started/authoring/images/jupyter-callout.png){.border fig-alt=""}

Note that if we run this cell you'll see that the output looks nothing like a callout!
This is because callouts aren't supported natively by the markdown renderer built in to Jupyter Lab.

![](/docs/get-started/authoring/images/jupyter-callout-render.png){.border fig-alt="Jupyter notebook with unsuccessful callout rendering."}

However, when we ultimately render the document with Quarto the callout appears as intended.

::: callout-note
Note that there are five types of callouts, including `note`, `tip`, `warning`, `caution`, and `important`.
:::

You can learn more about the different types of callouts and options for their appearance in the [Callouts](/docs/authoring/callouts.qmd) documentation.

## Article Layout

The body of Quarto articles have a default width of approximately 700 pixels.
This width is chosen to [optimize readability](https://medium.com/ben-shoemate/optimum-web-readability-max-and-min-width-for-page-text-dee9987a27a0).
This normally leaves some available space in the document margins and there are a few ways you can take advantage of this space.

In this notebook, we use the `reference-location` option to indicate that we would like footnotes to be placed in the right margin.

We also use the `column: screen-inset` cell option to indicate we would like our figure to occupy the full width of the screen, with a small inset.

```` {.markdown .visually-hidden}
---
title: Quarto Layout
format: html
reference-location: margin
jupyter: python3
---

## Placing Colorbars

Colorbars indicate the quantitative extent of image data.
Placing in a figure is non-trivial because room needs to
be made for them. The simplest case is just attaching a 
colorbar to each axes:^[See the [Matplotlib Gallery](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/colorbar_placement.html) to explore colorbars further].

```{{python}}
#| code-fold: true
#| column: screen-inset
import matplotlib.pyplot as plt
import numpy as np

fig, axs = plt.subplots(2, 2)
fig.set_size_inches(20, 8)
cmaps = ['RdBu_r', 'viridis']
for col in range(2):
    for row in range(2):
        ax = axs[row, col]
        pcm = ax.pcolormesh(
          np.random.random((20, 20)) * (col + 1),
          cmap=cmaps[col]
        )
        fig.colorbar(pcm, ax=ax)
plt.show()
```
````

![](images/jupyter-layout.png){.border fig-alt=""}

Here is what this document looks like when rendered.

![](images/layout-render.png){.border fig-alt="Document with Quarto Layout title at the top followed by Placing Colorbars header with text below it. Next to the text is a footnote in the page margin. Below the text is a toggleable code widget to hide/reveal the code followed by four plots displayed in two rows and two columns."}

You can locate citations, footnotes, and [asides](https://quarto.org/docs/authoring/article-layout.html#asides,) in the margin.
You can also define custom column spans for figures, tables, or other content.
See the documentation on [Article Layout](/docs/authoring/article-layout.qmd) for additional details.

``` include
_footer.md
```
