---
title: "チュートリアル: Hello, Quarto"
editor_options:
  markdown:
    wrap: sentence
    canonical: true
---

``` include
../_tool-chooser.md
```

## 概要

このチュートリアルでは、QuartoでJupyter Labを使用する方法を紹介します。
他のノートブックと同じようにJupyter Labでコードやマークダウンを編集し、レンダリングされたドキュメントをWebブラウザでプレビューしながら作業を行います。

以下は、その概要です。

![](images/jupyter-quarto-preview.png){fig-alt="左側のQuarto BasicsというタイトルのJupyterノートブックには、テキスト、コードセル、コードセルの結果（極軸上のラインプロット）が含まれています。右側は 同じノートブックをレンダリングしたものです。"}

左のノートブックは、右のHTMLバージョンに*レンダリング*されています。
これはQuarto出版の基本モデルです。ソースドキュメント（この場合はノートブック）を受け取り、HTML、PDF、MS Wordなどのさまざまな[出力フォーマット](https://quarto.org/docs/output-formats/all-formats.html)にレンダリングします。

::: callout-note
このチュートリアルではPythonを使用していますが、Juliaの使用（[IJulia](https://julialang.github.io/IJulia.jl/stable/)カーネル経由）も十分にサポートされていることに注意してください。
詳細は、[Using Julia](/docs/computations/julia.qmd) の記事を参照してください。
:::

## レンダリング

まず、Jupyter Lab でノートブック (`hello.ipynb`) を開き、いくつかのフォーマットにレンダリングするところから始めます。
自分の環境でステップバイステップで進めたい方は、以下からノートブックをダウンロードしてください。

::: {.callout-note appearance="minimal"}
<i class="bi bi-journal-code"></i> [Download hello.ipynb](_hello.ipynb){download="hello.ipynb"}
:::

次に、作業用の新しいディレクトリを作成し、このディレクトリにノートブックをコピーします。

この後、ターミナルでこのディレクトリに移動し、ノートブックの依存関係をインストールし、Jupyter Labを開いてノートブックでの作業を開始します。
インストールとJupyter Labの起動に使用できるコマンドは以下のとおりです。

+-----------+--------------------------------------------------------------+
| Platform  | Commands                                                     |
+===========+==============================================================+
| Mac/Linux |     python3 -m pip install jupyter matplotlib plotly         |
|           |     python3 -m jupyter lab hello.ipynb                       |
+-----------+--------------------------------------------------------------+
| Windows   |     py -m pip install jupyter matplotlib plotly              |
|           |     py -m jupyter lab hello.ipynb                            |
+-----------+--------------------------------------------------------------+

Jupyter Labで作成したノートブックがこちらです。

```` {.markdown .visually-hidden}
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

![](images/jupyter-basics.png){.border fig-alt="A Jupyter notebook titled Quarto Basics containing some text, a code cell, and the result of the code cell, which is a line plot on a polar axis."}

次に、Jupyter Lab 内に Quarto コマンドに使用する Terminal を新規に作成します。

![](images/jupyter-terminal.png){.border fig-alt="Screenshot of menu items in Jupuyter Lab: File > New > Terminal."}

そして最後に、ノートブックをいくつかの形式にレンダリングします。

``` {.bash filename="Terminal"}
quarto render hello.ipynb --to html
quarto render hello.ipynb --to docx
```

ターゲットファイル（この場合は `hello.ipynb` ）は常にコマンドラインの一番最初の引数でなければならないことに注意してください。

QuartoでJupyterノートブックをレンダリングすると、ノートブックの内容（コード、マークダウン、出力）がプレーンなマークダウンに変換され、[Pandoc](http://pandoc.org/)で処理されて、完成したフォーマットが作成されるのです。

![](images/ipynb-how-it-works.png){style="margin-left: 15px;" fig-align="left" width="516" fig-alt="Workflow diagram starting with a Jupyter notebook, then md, then pandoc, then PDF, MS Word, or HTML."}

## オーサリング

`quarto render` コマンドは、配布用の最終版のドキュメントを作成するために使用されます。
しかし、オーサリング中は `quarto preview` コマンドを使用します。
今すぐターミナルから `hello.ipynb` を使って試してみてください。

``` {.bash filename="Terminal"}
quarto preview hello.ipynb
```

これにより、文書がレンダリングされ、ウェブブラウザに表示されます。

![](images/quarto-preview.png){.border fig-alt="Rendered version of the earlier notebook in a web browser." width="500"}

Jupyter Labとブラウザのプレビューを並べて配置し、作業中の変化を確認するとよいでしょう。

![](images/jupyter-quarto-preview.png){fig-alt="Side-by-side preview of notebook on the left and live preview in the browser on the right."}

ライブプレビューを実際に見るには:

1.  `theta` を定義しているコードの行を以下のように変更します。

    ``` python
    theta = 4 * np.pi * r
    ```

2.  コードセルを再実行すると、新しいバージョンのプロットが生成されます。

3.  ノートブックを保存します（プレビューは自動的に更新されます）。

これがQuartoでオーサリングする際の基本的なワークフローです。

ノートにはいくつかの種類のセルがありますが、それぞれのセルについて少し考えてみましょう。

## YAMLオプション

マークダウンとコードのセルはすでにおなじみでしょうが、ドキュメントレベルの YAML オプションに使われる新しいタイプのセル ("Raw") があります。

``` {.yaml .visually-hidden}
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---
```

![](images/jupyter-yaml.png){.border fig-alt="YAML of the notebook with the fields title, format, and jupyter. Title is set to Quarto Basics with title: \"Quarto Basics\". Format is defined as html in the next line, and within the html format, code-fold is set to true. Jupyter is set to python3 with jupyter: python3."}

`code-fold` オプションを `false` に変更してみてください。

``` yaml
format: 
  html:
    code-fold: false
```

そして、ノートブックを保存してください。
以前はコードを表示するための **Code** ボタンで隠れていたのが、プロットの上に表示されるようになったことに気づくはずです。

## マークダウンセル

マークダウンセルはレンダリング中にQuartoに渡される生のマークダウンを含みます。
これらのセルには有効なQuarto [マークダウン構文](/docs/authoring/markdown-basics.qmd) を使用することができます。
ここではヘッダーと、下のコードセルで作成された図への相互参照を指定しています。

``` {.markdown .visually-hidden}
## Polar Axis

For a demonstration of a line plot on a polar axis, see @fig-polar.
```

![](images/jupyter-markdown.png){.border fig-alt="A Markdown cell with the title Polar Axis as a second level header and text that reads 'For a demonstration of a line plot on a polar axis, see @fig-polar.'"}

ヘッダーを変更し、ノートブックを保存すると、プレビューに新しいヘッダーテキストが反映されます。

## コードセル

下図のようなコードセルは、すでにご存知の方も多いと思います。

```` {.markdown .visually-hidden}
```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

![](images/jupyter-cell.png){.border fig-alt="A code cell with cell options for label and fig-cap and the code required to create the line plot on a polar axis."}

しかし、コードセルの上部には、 `label` と `fig-cap` オプションという、いくつかの新しいコンポーネントが存在します。
セルのオプションは、特別なプレフィックス付きのコメント (`#|`) を使用して YAML で記述されます。

この例では、セルオプションは図を相互参照できるようにするために使用されています。
`fig-cap`やコードを変更し、セルを実行し、ノートブックを保存すると、更新されたプレビューを見ることができます。
出力を調整するために適用できる[セルオプション](/docs/reference/cells/cells-jupyter.qmd)は多岐に渡ります。
これらのオプションについては、次のチュートリアルで掘り下げて説明します。

::: callout-note
図形のための特に便利なセルオプションは `fig-alt` で、これは視覚障害のあるユーザーのために画像に代替テキストを追加することができるようにするものです。
詳しくは Amy Cesal の記事 [Writing Alt Text for Data Visualization](https://medium.com/nightingale/writing-alt-text-for-data-visualization-2a218ef43f81) を参照してください。
:::

``` include
_footer.md
```
